### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

type Mutation {
  createAnOrder(orders: [orderInput]): order
  createCategory(category: String!, userID: ID!): category
  createCategoryArchive(categoryID: ID!, userID: ID!): archive
  createExpense(expFolderID: ID!, expenses: expenseInput): expenses
  createExpenseFolder(exFolder: String!, userID: ID!): expenseFolder
  createExpenseFolderArchive(expFolderID: ID!, userID: ID!): archive
  createItemArchive(itemsID: ID!, userID: ID!): archive
  createMedicalItems(categoryID: ID!, items: itemInput, userID: ID!): item
  createNotificationSystem: notification
  createUserAccount(role: role!, user: userInput): user
  createUserArchive(mainUser: ID!, userID: ID!): archive
  deleteCategory(categoryID: ID!, userID: ID!): category
  deleteExpFolder(expFolderID: ID!, userID: ID!): expenseFolder
  deleteExpense(expenseID: [ID]!): [expenses]
  deleteMedicalItem(itemsID: ID!, userID: ID!): item
  deleteUserAccount(main: ID!, userID: ID!): user
  generateOrderReport(endDate: String!, startDate: String!): [order]
  login(email: EmailAddress!, password: String!): token
  resetUserPasswordToDefault(userID: ID!): user
  updateArchive(archiveID: ID!, userID: ID!): archive
  updateCategory(category: String!, categoryID: ID!, userID: ID!): category
  updateExpense(expenseID: ID!, expenses: expenseInput): expenses
  updateExpenseFolder(exFolder: String!, expFolderID: ID!, userID: ID!): expenseFolder
  updateMedicalitems(items: itemInput, itemsID: ID!, userID: ID!): item
  updateNotificationSystem(notificationID: ID!): notification
  updateUserAccounts(user: userInput, userID: ID!): user
  updateUserEmailAddress(email: EmailAddress!, userID: ID!): user
  updateUserPassword(currentPasword: String!, password: String!, retype: String!, userID: ID!): user
  updateUserProfile(birthday: Date!, firstname: String!, lastname: String!, phone: PhoneNumber!, userID: ID!): profile
}

type OrderTotal {
  date: String
  total: Int
}

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar PhoneNumber

type Query {
  getAllArchiveByTab(tab: tab): [archive]
  getAllCategory: [category]
  getAllExpense(expFolderID: ID!): [expenses]
  getAllExpenseByGroup(expFolderID: ID!): [expenses]
  getAllExpenseFolder: [expenseFolder]
  getAllNotification: [notification]
  getAllOrderHistory(dmy: String!): [OrderTotal]
  getAllOrders: [order]
  getAllStoreItems: [item]
  getAllUnreadNotification: [notification]
  getAllUserAccount: [user]
  getAllUserAccountManagerRole: [user]
  getCategotiesById(categoryID: ID!): [category]
  getCurrentOrdersBy20: [order]
  getExpenseFolderById(expFolderID: ID!): [expenseFolder]
  getItemBySearch(categoryID: ID!, search: ID!): [item]
  getItemsByCategoryId(categoryID: ID!): [item]
  getItemsById(itemsID: ID!): [item]
  getItemsByStaff(search: String!): [item]
  getLogByUserId(offset: Int!, orders: String!, take: Int!, userID: ID!): [logs]
  getOrderById(orderID: ID!): [order]
  getProfileByUserId(userID: ID!): [profile]
  getSearchByFolderName(search: String!): [expenseFolder]
  getSearchByUser(search: String!): [user]
  getSearchCategory(search: String!): [category]
  getTotalNoOfItems: Int
  getTotalNoOfOrders: Int
  getTotalRevenue: Float
  getUserById(userID: ID!): [user]
}

type Subscription {
  archiveSubscriptions(tab: tab): archive
  categorySubscriptions: category
  createItemSubscriptions(categoryID: ID!): item
  createOrders: order
  createUserSubscriptions: user
  expenseFolderSubscriptions: expenseFolder
  expensesSubscriptions(expFolderID: ID!): expenses
}

type archive {
  archive: Boolean
  archiveID: ID
  categories: [category]
  createdAt: DateTime
  expenseFolder: [expenseFolder]
  items: [item]
  updatedAt: DateTime
  user: [user]
}

type category {
  category: String
  categoryID: ID
  createdAt: DateTime
  items: [item]
  totalNumberOfItems: Int
  updatedAt: DateTime
}

type expenseFolder {
  createdAt: DateTime
  exFolder: String
  expFolderID: ID
  expenseAmount: Int
  getAllExpenses: [expenses]
}

input expenseInput {
  amount: Float
  expense: String
  mod: String
  payDate: Date
}

type expenses {
  amount: Float
  createdAt: DateTime
  expense: String
  expenseID: ID
  mod: String
  payDate: Date
}

type item {
  category: [category]
  dosage: String
  items: String
  itemsID: ID
  storeInfo: [store]
}

input itemInput {
  dosage: String
  expiredDate: Date
  items: String
  price: Float
  quantity: Int
}

type logs {
  createdAt: DateTime
  descriptions: String
  logs: String
  logsID: ID
}

type notification {
  createdAt: DateTime
  notifStatus: String
  notification: String
  notificationID: ID
}

type order {
  createdAt: DateTime
  itemCount: Int
  order: String
  orderCart: [orderCart]
  orderID: ID
  total: Float
}

type orderCart {
  cartItem: [item]
  createdAt: DateTime
  orderListItemID: ID
  quantity: Int
  total: Float
}

input orderInput {
  itemsID: ID
  quantity: Int
  total: Float
}

type profile {
  birthday: Date
  firstname: String
  fullname: String
  lastname: String
  myUser: [user]
  phone: PhoneNumber
  profileID: ID
}

enum role {
  admin
  manager
  staff
}

type salary {
  createdAt: DateTime
  salary: Float
  salaryID: ID
  updatedAt: DateTime
}

type store {
  expiredDate: Date
  price: Float
  quantity: Int
  storeInfoID: ID
}

enum tab {
  category
  expFolder
  item
  user
}

type token {
  token: String
}

type user {
  createdAt: DateTime
  email: EmailAddress
  logs: [logs]
  myProfile: [profile]
  password: String
  role: String
  salary: [salary]
  updatedAt: DateTime
  userID: ID
}

input userInput {
  birthday: Date
  email: EmailAddress
  firstname: String
  lastname: String
  phone: PhoneNumber
  salary: Float
}